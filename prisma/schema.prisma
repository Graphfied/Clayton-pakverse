// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  firstName     String?
  lastName      String?
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
 reservations  Reservations[]
 billingDetails BillingDetails[]
 orders         Order[]
}
enum ReservationStatus {
  PENDING
  COMPLETE
  CANCELLED
  CONFIRMED
  // Add any other statuses as needed
}


model Reservations {
  id            String   @id @default(cuid())
  date          String?
  dayOfWeek     String?
  month         String?
  dateOfMonth   String?
  time          String?
  serviceName   String?
  duration      String?
  year          String?
  fullName      String?
  phoneNumber   String?
  email         String?
  confirmEmail  String?
  birthMonth    String?
  birthDay      String?
  birthYear     String?
  extraPrice    String?
  status        ReservationStatus @default(PENDING)
  price         String?

  userId        String
  user          User @relation(fields: [userId] , references: [id] , onDelete: Cascade)
}

model BillingDetails {
  id            String @id @default(cuid())
  name          String?
  phoneNumber   String?
  email         String?

  userId       String
  user         User @relation(fields: [userId] , references: [id] , onDelete: Cascade)
}

model Order {
  id            Int      @id @default(autoincrement())
  // orderNumber   String   @unique
  date          DateTime
  email         String   @unique
  totalPrice    Float
  // paymentMethod String
  userId        String
  user          User @relation(fields: [userId],references: [id],onDelete: Cascade)

  // Relations with other models (if any) can be added here
  // For example, if an order is related to a user or reservation, you would include that relationship here.
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}